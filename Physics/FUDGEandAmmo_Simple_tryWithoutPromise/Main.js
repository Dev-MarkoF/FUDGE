"use strict";
///<reference types="../../Core/Build/FudgeCore.js"/>
///<reference types="../Physics_Library/ammo.js"/>
var f = FudgeCore;
var Fudge_PysicsCommunication;
(function (Fudge_PysicsCommunication) {
    const app = document.querySelector("canvas");
    let viewPort;
    let hierarchy;
    let fps;
    const times = [];
    let cubes = new Array();
    let fpsDisplay = document.querySelector("h2#FPS");
    //Physics Variables
    let world;
    let bodies = new Array();
    let transform;
    //Raycast Variables
    let tempVRayOrigin;
    let tempVRayDest;
    let closestRayResultCallback;
    let matHit = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0, 1, 0, 1)));
    let matHitOther = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0, 1, 0.7, 1)));
    let matNormal = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1)));
    window.addEventListener("load", initPhysics);
    let collisionConfiguration, dispatcher, overlappingPairCache, solver;
    function initPhysics() {
        Ammo().then(function () {
            transform = new Ammo.btTransform();
            tempVRayOrigin = new Ammo.btVector3(-5, 1.2, 0);
            tempVRayDest = new Ammo.btVector3(5, 1.2, 0);
            closestRayResultCallback = new Ammo.ClosestRayResultCallback(tempVRayOrigin, tempVRayDest);
            collisionConfiguration = new Ammo.btDefaultCollisionConfiguration();
            dispatcher = new Ammo.btCollisionDispatcher(collisionConfiguration);
            overlappingPairCache = new Ammo.btDbvtBroadphase();
            solver = new Ammo.btSequentialImpulseConstraintSolver();
            world = new Ammo.btDiscreteDynamicsWorld(dispatcher, overlappingPairCache, solver, collisionConfiguration);
            world.setGravity(new Ammo.btVector3(0, -10, 0));
            init();
        });
    }
    function init() {
        f.Debug.log(app);
        f.RenderManager.initialize();
        hierarchy = new f.Node("Scene");
        let ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube());
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.local.scale(new f.Vector3(20, 0.3, 20));
        hierarchy.appendChild(ground);
        cubes[0] = createCompleteMeshNode("Cube_1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform = cubes[0].getComponent(f.ComponentTransform);
        cmpCubeTransform.local.translate(new f.Vector3(0, 2, 0));
        cubes[0].mtxWorld.rotateX(45);
        hierarchy.appendChild(cubes[0]);
        cubes[1] = createCompleteMeshNode("Cube_2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform2 = cubes[1].getComponent(f.ComponentTransform);
        cmpCubeTransform2.local.translate(new f.Vector3(0, 6.5, 0.4));
        hierarchy.appendChild(cubes[1]);
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        let cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(2, 2, 10));
        cmpCamera.pivot.lookAt(f.Vector3.ZERO());
        //Physics Ammo
        world.setGravity(new Ammo.btVector3(0, -10, 0));
        initializePhysicsBody(ground.getComponent(f.ComponentTransform), 0, 0);
        initializePhysicsBody(cmpCubeTransform, 1, 1);
        initializePhysicsBody(cmpCubeTransform2, 1, 2);
        //EndPhysics
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Loop.start(f.LOOP_MODE.TIME_GAME, 60);
    }
    function update() {
        //Physics Ammo
        world.stepSimulation(f.Loop.timeFrameGame / 1000);
        applyPhysicsBody(cubes[0].getComponent(f.ComponentTransform), 1);
        applyPhysicsBody(cubes[1].getComponent(f.ComponentTransform), 2);
        //EndPhysics
        raycast();
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(() => {
            const now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function raycast() {
        // Reset closestRayResultCallback to reuse it
        let rayCallBack = Ammo.castObject(closestRayResultCallback, Ammo.RayResultCallback);
        rayCallBack.set_m_closestHitFraction(1);
        rayCallBack.set_m_collisionObject(null);
        // Perform ray test
        world.rayTest(tempVRayOrigin, tempVRayDest, closestRayResultCallback);
        if (closestRayResultCallback.hasHit()) {
            let callbackBody = Ammo.castObject(closestRayResultCallback.get_m_collisionObject(), Ammo.btRigidBody);
            if (callbackBody == bodies[1]) {
                cubes[0].getComponent(f.ComponentMaterial).material = matHit;
            }
            else if (callbackBody == bodies[2]) {
                cubes[1].getComponent(f.ComponentMaterial).material = matHitOther;
            }
        }
        else {
            cubes[0].getComponent(f.ComponentMaterial).material = matNormal;
            cubes[1].getComponent(f.ComponentMaterial).material = matNormal;
        }
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function initializePhysicsBody(_cmpTransform, massVal, no) {
        let node = _cmpTransform.getContainer();
        let scale = new Ammo.btVector3(_cmpTransform.local.scaling.x / 2, _cmpTransform.local.scaling.y / 2, _cmpTransform.local.scaling.z / 2);
        let pos = new Ammo.btVector3(_cmpTransform.local.translation.x, _cmpTransform.local.translation.y, _cmpTransform.local.translation.z);
        let transform = new Ammo.btTransform();
        let quaternionRot = makeQuaternionFromRotation(node.mtxWorld.rotation.y, node.mtxWorld.rotation.x, node.mtxWorld.rotation.z);
        let rotation = new Ammo.btQuaternion(quaternionRot[0], quaternionRot[1], quaternionRot[2], quaternionRot[3]);
        transform.setIdentity();
        transform.setOrigin(pos);
        transform.setRotation(rotation);
        let shape = new Ammo.btBoxShape(scale);
        shape.setMargin(0.05);
        let mass = massVal;
        let localInertia = new Ammo.btVector3(0, 0, 0);
        shape.calculateLocalInertia(mass, localInertia);
        let myMotionState = new Ammo.btDefaultMotionState(transform);
        let rbInfo = new Ammo.btRigidBodyConstructionInfo(mass, myMotionState, shape, localInertia);
        rbInfo.m_restitution = 0.5;
        let body = new Ammo.btRigidBody(rbInfo);
        bodies[no] = body;
        world.addRigidBody(body);
    }
    function applyPhysicsBody(_cmpTransform, no) {
        let node = _cmpTransform.getContainer();
        let body = bodies[no];
        body.getMotionState().getWorldTransform(transform);
        //body.setLinearVelocity(new Ammo.btVector3(1, 0, 0));
        let origin = transform.getOrigin();
        let tmpPosition = new f.Vector3(origin.x(), origin.y(), origin.z());
        let rotation = transform.getRotation();
        //let rotTemp: Ammo.btVector3 = transform.getRotation().getAxis(); //Rotationen nicht aus Quaterions berechnen
        //let rot: f.Vector3 = new f.Vector3(rotTemp.x(), rotTemp.y(), rotTemp.z());
        let rotQuat = new Array();
        rotQuat.x = rotation.x();
        rotQuat.y = rotation.y();
        rotQuat.z = rotation.z();
        rotQuat.w = rotation.w();
        let mutator = {};
        let tmpRotation = makeRotationFromQuaternion(rotQuat, node.mtxLocal.rotation);
        mutator["rotation"] = tmpRotation;
        node.mtxLocal.mutate(mutator);
        mutator["translation"] = tmpPosition;
        node.mtxLocal.mutate(mutator);
    }
    function makeRotationFromQuaternion(q, targetAxis = new f.Vector3(1, 1, 1)) {
        let angles = new f.Vector3();
        // roll (x-axis rotation)
        let sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
        let cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
        angles.x = Math.atan2(sinr_cosp, cosr_cosp) * f.Loop.getFpsRealAverage(); //*Framerate? //* 180;
        // pitch (y-axis rotation)
        let sinp = 2 * (q.w * q.y - q.z * q.x);
        if (Math.abs(sinp) >= 1)
            angles.y = copysign(Math.PI / 2, sinp) * f.Loop.getFpsRealAverage(); // use 90 degrees if out of range
        else
            angles.y = Math.asin(sinp) * f.Loop.getFpsRealAverage();
        // yaw (z-axis rotation)
        let siny_cosp = 2 * (q.w * q.z + q.x * q.y);
        let cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
        angles.z = Math.atan2(siny_cosp, cosy_cosp) * f.Loop.getFpsRealAverage();
        ;
        //f.Debug.log(angles);
        return angles;
    }
    function makeQuaternionFromRotation(yawY, pitchX, rollZ) {
        //  Roll first, about axis the object is facing, then
        //  pitch upward, then yaw to face into the new heading
        let sr, cr, sp, cp, sy, cy;
        let halfRoll = rollZ * 0.5;
        sr = Math.sin(halfRoll);
        cr = Math.cos(halfRoll);
        let halfPitch = pitchX * 0.5;
        sp = Math.sin(halfPitch);
        cp = Math.cos(halfPitch);
        let halfYaw = yawY * 0.5;
        sy = Math.sin(halfYaw);
        cy = Math.cos(halfYaw);
        let result = [];
        result[0] = cy * sp * cr + sy * cp * sr;
        result[1] = sy * cp * cr - cy * sp * sr;
        result[2] = cy * cp * sr - sy * sp * cr;
        result[3] = cy * cp * cr + sy * sp * sr;
        return result;
    }
    function copysign(a, b) {
        return b < 0 ? -Math.abs(a) : Math.abs(a);
    }
})(Fudge_PysicsCommunication || (Fudge_PysicsCommunication = {}));
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiTWFpbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIk1haW4udHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLHFEQUFxRDtBQUNyRCxrREFBa0Q7QUFHbEQsSUFBTyxDQUFDLEdBQUcsU0FBUyxDQUFDO0FBRXJCLElBQVUseUJBQXlCLENBOFFsQztBQTlRRCxXQUFVLHlCQUF5QjtJQUdqQyxNQUFNLEdBQUcsR0FBc0IsUUFBUSxDQUFDLGFBQWEsQ0FBQyxRQUFRLENBQUMsQ0FBQztJQUNoRSxJQUFJLFFBQW9CLENBQUM7SUFDekIsSUFBSSxTQUFpQixDQUFDO0lBQ3RCLElBQUksR0FBVyxDQUFDO0lBQ2hCLE1BQU0sS0FBSyxHQUFhLEVBQUUsQ0FBQztJQUMzQixJQUFJLEtBQUssR0FBYSxJQUFJLEtBQUssRUFBRSxDQUFDO0lBQ2xDLElBQUksVUFBVSxHQUFnQixRQUFRLENBQUMsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0lBRS9ELG1CQUFtQjtJQUNuQixJQUFJLEtBQW1DLENBQUM7SUFDeEMsSUFBSSxNQUFNLEdBQUcsSUFBSSxLQUFLLEVBQUUsQ0FBQztJQUN6QixJQUFJLFNBQTJCLENBQUM7SUFFaEMsbUJBQW1CO0lBQ25CLElBQUksY0FBYyxDQUFDO0lBQ25CLElBQUksWUFBWSxDQUFDO0lBQ2pCLElBQUksd0JBQXdCLENBQUM7SUFDN0IsSUFBSSxNQUFNLEdBQWUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDLFdBQVcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxLQUFLLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVHLElBQUksV0FBVyxHQUFlLElBQUksQ0FBQyxDQUFDLFFBQVEsQ0FBQyxRQUFRLEVBQUUsQ0FBQyxDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUMsQ0FBQyxXQUFXLENBQUMs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Q3hDLE1BQU0sQ0FBQyxDQUFDLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsQ0FBQztRQUN4QyxNQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFFeEMsT0FBTyxNQUFNLENBQUM7SUFDaEIsQ0FBQztJQUdELFNBQVMsUUFBUSxDQUFDLENBQVMsRUFBRSxDQUFTO1FBQ3BDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO0lBQzVDLENBQUM7QUFFSCxDQUFDLEVBOVFTLHlCQUF5QixLQUF6Qix5QkFBeUIsUUE4UWxDIiwic291cmNlc0NvbnRlbnQiOlsiLy8vPHJlZmVyZW5jZSB0eXBlcz1cIi4uLy4uL0NvcmUvQnVpbGQvRnVkZ2VDb3JlLmpzXCIvPlxyXG4vLy88cmVmZXJlbmNlIHR5cGVzPVwiLi4vUGh5c2ljc19MaWJyYXJ5L2FtbW8uanNcIi8+XHJcblxyXG5cclxuaW1wb3J0IGYgPSBGdWRnZUNvcmU7XHJcblxyXG5uYW1lc3BhY2UgRnVkZ2VfUHlzaWNzQ29tbXVuaWNhdGlvbiB7XHJcblxyXG5cclxuICBjb25zdCBhcHA6IEhUTUxDYW52YXNFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImNhbnZhc1wiKTtcclxuICBsZXQgdmlld1BvcnQ6IGYuVmlld3BvcnQ7XHJcbiAgbGV0IGhpZXJhcmNoeTogZi5Ob2RlO1xyXG4gIGxldCBmcHM6IG51bWJlcjtcclxuICBjb25zdCB0aW1lczogbnVtYmVyW10gPSBbXTtcclxuICBsZXQgY3ViZXM6IGYuTm9kZVtdID0gbmV3IEFycmF5KCk7XHJcbiAgbGV0IGZwc0Rpc3BsYXk6IEhUTUxFbGVtZW50ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihcImgyI0ZQU1wiKTtcclxuXHJcbiAgLy9QaHlzaWNzIFZhcmlhYmxlc1xyXG4gIGxldCB3b3JsZDogQW1tby5idERpc2NyZXRlRHluYW1pY3NXb3JsZDtcclxuICBsZXQgYm9kaWVzID0gbmV3IEFycmF5KCk7XHJcbiAgbGV0IHRyYW5zZm9ybTogQW1tby5idFRyYW5zZm9ybTtcclxuXHJcbiAgLy9SYXljYXN0IFZhcmlhYmxlc1xyXG4gIGxldCB0ZW1wVlJheU9yaWdpbjtcclxuICBsZXQgdGVtcFZSYXlEZXN0O1xyXG4gIGxldCBjbG9zZXN0UmF5UmVzdWx0Q2FsbGJhY2s7XHJcbiAgbGV0IG1hdEhpdDogZi5NYXRlcmlhbCA9IG5ldyBmLk1hdGVyaWFsKFwiR3JvdW5kXCIsIGYuU2hhZGVyRmxhdCwgbmV3IGYuQ29hdENvbG9yZWQobmV3IGYuQ29sb3IoMCwgMSwgMCwgMSkpKTtcclxuICBsZXQgbWF0SGl0T3RoZXI6IGYuTWF0ZXJpYWwgPSBuZXcgZi5NYXRlcmlhbChcIkdyb3VuZFwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDAsIDEsIDAuNywgMSkpKTtcclxuICBsZXQgbWF0Tm9ybWFsOiBmLk1hdGVyaWFsID0gbmV3IGYuTWF0ZXJpYWwoXCJHcm91bmRcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigxLCAwLCAwLCAxKSkpO1xyXG5cclxuICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcihcImxvYWRcIiwgaW5pdFBoeXNpY3MpO1xyXG5cclxuICBsZXQgY29sbGlzaW9uQ29uZmlndXJhdGlvbixcclxuICAgIGRpc3BhdGNoZXIsXHJcbiAgICBvdmVybGFwcGluZ1BhaXJDYWNoZSxcclxuICAgIHNvbHZlcjtcclxuXHJcblxyXG4gIGZ1bmN0aW9uIGluaXRQaHlzaWNzKCk6IHZvaWQge1xyXG4gICAgQW1tbygpLnRoZW4oZnVuY3Rpb257XHJcbiAgICAgIHRyYW5zZm9ybSA9IG5ldyBBbW1vLmJ0VHJhbnNmb3JtKCk7XHJcbiAgICAgIHRlbXBWUmF5T3JpZ2luID0gbmV3IEFtbW8uYnRWZWN0b3IzKC01LCAxLjIsIDApO1xyXG4gICAgICB0ZW1wVlJheURlc3QgPSBuZXcgQW1tby5idFZlY3RvcjMoNSwgMS4yLCAwKTtcclxuICAgICAgY2xvc2VzdFJheVJlc3VsdENhbGxiYWNrID0gbmV3IEFtbW8uQ2xvc2VzdFJheVJlc3VsdENhbGxiYWNrKHRlbXBWUmF5T3JpZ2luLCB0ZW1wVlJheURlc3QpO1xyXG5cclxuICAgICAgY29sbGlzaW9uQ29uZmlndXJhdGlvbiA9IG5ldyBBbW1vLmJ0RGVmYXVsdENvbGxpc2lvbkNvbmZpZ3VyYXRpb24oKTtcclxuICAgICAgZGlzcGF0Y2hlciA9IG5ldyBBbW1vLmJ0Q29sbGlzaW9uRGlzcGF0Y2hlcihjb2xsaXNpb25Db25maWd1cmF0aW9uKTtcclxuICAgICAgb3ZlcmxhcHBpbmdQYWlyQ2FjaGUgPSBuZXcgQW1tby5idERidnRCcm9hZHBoYXNlKCk7XHJcbiAgICAgIHNvbHZlciA9IG5ldyBBbW1vLmJ0U2VxdWVudGlhbEltcHVsc2VDb25zdHJhaW50U29sdmVyKCk7XHJcblxyXG4gICAgICB3b3JsZCA9IG5ldyBBbW1vLmJ0RGlzY3JldGVEeW5hbWljc1dvcmxkKGRpc3BhdGNoZXIsIG92ZXJsYXBwaW5nUGFpckNhY2hlLCBzb2x2ZXIsIGNvbGxpc2lvbkNvbmZpZ3VyYXRpb24pO1xyXG4gICAgICB3b3JsZC5zZXRHcmF2aXR5KG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAtMTAsIDApKTtcclxuXHJcbiAgICAgIGluaXQoKTtcclxuICAgIH0pO1xyXG5cclxuICB9XHJcblxyXG5cclxuXHJcbiAgZnVuY3Rpb24gaW5pdCgpOiB2b2lkIHtcclxuICAgIGYuRGVidWcubG9nKGFwcCk7XHJcbiAgICBmLlJlbmRlck1hbmFnZXIuaW5pdGlhbGl6ZSgpO1xyXG4gICAgaGllcmFyY2h5ID0gbmV3IGYuTm9kZShcIlNjZW5lXCIpO1xyXG5cclxuICAgIGxldCBncm91bmQ6IGYuTm9kZSA9IGNyZWF0ZUNvbXBsZXRlTWVzaE5vZGUoXCJHcm91bmRcIiwgbmV3IGYuTWF0ZXJpYWwoXCJHcm91bmRcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigwLjIsIDAuMiwgMC4yLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpKTtcclxuICAgIGxldCBjbXBHcm91bmRNZXNoOiBmLkNvbXBvbmVudFRyYW5zZm9ybSA9IGdyb3VuZC5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG5cclxuICAgIGNtcEdyb3VuZE1lc2gubG9jYWwuc2NhbGUobmV3IGYuVmVjdG9yMygyMCwgMC4zLCAyMCkpO1xyXG4gICAgaGllcmFyY2h5LmFwcGVuZENoaWxkKGdyb3VuZCk7XHJcblxyXG4gICAgY3ViZXNbMF0gPSBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKFwiQ3ViZV8xXCIsIG5ldyBmLk1hdGVyaWFsKFwiQ3ViZVwiLCBmLlNoYWRlckZsYXQsIG5ldyBmLkNvYXRDb2xvcmVkKG5ldyBmLkNvbG9yKDEsIDAsIDAsIDEpKSksIG5ldyBmLk1lc2hDdWJlKCkpO1xyXG4gICAgbGV0IGNtcEN1YmVUcmFuc2Zvcm06IGYuQ29tcG9uZW50VHJhbnNmb3JtID0gY3ViZXNbMF0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50VHJhbnNmb3JtKTtcclxuICAgIGNtcEN1YmVUcmFuc2Zvcm0ubG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgMiwgMCkpO1xyXG4gICAgY3ViZXNbMF0ubXR4V29ybGQucm90YXRlWCg0NSk7XHJcbiAgICBoaWVyYXJjaHkuYXBwZW5kQ2hpbGQoY3ViZXNbMF0pO1xyXG5cclxuICAgIGN1YmVzWzFdID0gY3JlYXRlQ29tcGxldGVNZXNoTm9kZShcIkN1YmVfMlwiLCBuZXcgZi5NYXRlcmlhbChcIkN1YmVcIiwgZi5TaGFkZXJGbGF0LCBuZXcgZi5Db2F0Q29sb3JlZChuZXcgZi5Db2xvcigxLCAwLCAwLCAxKSkpLCBuZXcgZi5NZXNoQ3ViZSgpKTtcclxuICAgIGxldCBjbXBDdWJlVHJhbnNmb3JtMjogZi5Db21wb25lbnRUcmFuc2Zvcm0gPSBjdWJlc1sxXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pO1xyXG4gICAgY21wQ3ViZVRyYW5zZm9ybTIubG9jYWwudHJhbnNsYXRlKG5ldyBmLlZlY3RvcjMoMCwgNi41LCAwLjQpKTtcclxuICAgIGhpZXJhcmNoeS5hcHBlbmRDaGlsZChjdWJlc1sxXSk7XHJcblxyXG4gICAgbGV0IGNtcExpZ2h0OiBmLkNvbXBvbmVudExpZ2h0ID0gbmV3IGYuQ29tcG9uZW50TGlnaHQobmV3IGYuTGlnaHREaXJlY3Rpb25hbChmLkNvbG9yLkNTUyhcIldISVRFXCIpKSk7XHJcbiAgICBjbXBMaWdodC5waXZvdC5sb29rQXQobmV3IGYuVmVjdG9yMygwLjUsIC0xLCAtMC44KSk7XHJcbiAgICBoaWVyYXJjaHkuYWRkQ29tcG9uZW50KGNtcExpZ2h0KTtcclxuXHJcbiAgICBsZXQgY21wQ2FtZXJhOiBmLkNvbXBvbmVudENhbWVyYSA9IG5ldyBmLkNvbXBvbmVudENhbWVyYSgpO1xyXG4gICAgY21wQ2FtZXJhLmJhY2tncm91bmRDb2xvciA9IGYuQ29sb3IuQ1NTKFwiR1JFWVwiKTtcclxuICAgIGNtcENhbWVyYS5waXZvdC50cmFuc2xhdGUobmV3IGYuVmVjdG9yMygyLCAyLCAxMCkpO1xyXG4gICAgY21wQ2FtZXJhLnBpdm90Lmxvb2tBdChmLlZlY3RvcjMuWkVSTygpKTtcclxuXHJcbiAgICAvL1BoeXNpY3MgQW1tb1xyXG4gICAgd29ybGQuc2V0R3Jhdml0eShuZXcgQW1tby5idFZlY3RvcjMoMCwgLTEwLCAwKSk7XHJcbiAgICBpbml0aWFsaXplUGh5c2ljc0JvZHkoZ3JvdW5kLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSksIDAsIDApO1xyXG4gICAgaW5pdGlhbGl6ZVBoeXNpY3NCb2R5KGNtcEN1YmVUcmFuc2Zvcm0sIDEsIDEpO1xyXG4gICAgaW5pdGlhbGl6ZVBoeXNpY3NCb2R5KGNtcEN1YmVUcmFuc2Zvcm0yLCAxLCAyKTtcclxuICAgIC8vRW5kUGh5c2ljc1xyXG5cclxuICAgIHZpZXdQb3J0ID0gbmV3IGYuVmlld3BvcnQoKTtcclxuICAgIHZpZXdQb3J0LmluaXRpYWxpemUoXCJWaWV3cG9ydFwiLCBoaWVyYXJjaHksIGNtcENhbWVyYSwgYXBwKTtcclxuXHJcbiAgICB2aWV3UG9ydC5zaG93U2NlbmVHcmFwaCgpO1xyXG5cclxuICAgIGYuTG9vcC5hZGRFdmVudExpc3RlbmVyKGYuRVZFTlQuTE9PUF9GUkFNRSwgdXBkYXRlKTtcclxuICAgIGYuTG9vcC5zdGFydChmLkxPT1BfTU9ERS5USU1FX0dBTUUsIDYwKTtcclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiB1cGRhdGUoKTogdm9pZCB7XHJcblxyXG4gICAgLy9QaHlzaWNzIEFtbW9cclxuICAgIHdvcmxkLnN0ZXBTaW11bGF0aW9uKGYuTG9vcC50aW1lRnJhbWVHYW1lIC8gMTAwMCk7XHJcbiAgICBhcHBseVBoeXNpY3NCb2R5KGN1YmVzWzBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudFRyYW5zZm9ybSksIDEpO1xyXG4gICAgYXBwbHlQaHlzaWNzQm9keShjdWJlc1sxXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRUcmFuc2Zvcm0pLCAyKTtcclxuICAgIC8vRW5kUGh5c2ljc1xyXG4gICAgcmF5Y2FzdCgpO1xyXG4gICAgdmlld1BvcnQuZHJhdygpO1xyXG4gICAgbWVhc3VyZUZQUygpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gbWVhc3VyZUZQUygpOiB2b2lkIHtcclxuICAgIHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUoKCkgPT4ge1xyXG4gICAgICBjb25zdCBub3cgPSBwZXJmb3JtYW5jZS5ub3coKTtcclxuICAgICAgd2hpbGUgKHRpbWVzLmxlbmd0aCA+IDAgJiYgdGltZXNbMF0gPD0gbm93IC0gMTAwMCkge1xyXG4gICAgICAgIHRpbWVzLnNoaWZ0KCk7XHJcbiAgICAgIH1cclxuICAgICAgdGltZXMucHVzaChub3cpO1xyXG4gICAgICBmcHMgPSB0aW1lcy5sZW5ndGg7XHJcbiAgICAgIGZwc0Rpc3BsYXkudGV4dENvbnRlbnQgPSBcIkZQUzogXCIgKyBmcHMudG9TdHJpbmcoKTtcclxuICAgIH0pO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gcmF5Y2FzdCgpIHtcclxuICAgIC8vIFJlc2V0IGNsb3Nlc3RSYXlSZXN1bHRDYWxsYmFjayB0byByZXVzZSBpdFxyXG4gICAgbGV0IHJheUNhbGxCYWNrID0gQW1tby5jYXN0T2JqZWN0KGNsb3Nlc3RSYXlSZXN1bHRDYWxsYmFjaywgQW1tby5SYXlSZXN1bHRDYWxsYmFjayk7XHJcbiAgICByYXlDYWxsQmFjay5zZXRfbV9jbG9zZXN0SGl0RnJhY3Rpb24oMSk7XHJcbiAgICByYXlDYWxsQmFjay5zZXRfbV9jb2xsaXNpb25PYmplY3QobnVsbCk7XHJcblxyXG4gICAgLy8gUGVyZm9ybSByYXkgdGVzdFxyXG4gICAgd29ybGQucmF5VGVzdCh0ZW1wVlJheU9yaWdpbiwgdGVtcFZSYXlEZXN0LCBjbG9zZXN0UmF5UmVzdWx0Q2FsbGJhY2spO1xyXG5cclxuICAgIGlmIChjbG9zZXN0UmF5UmVzdWx0Q2FsbGJhY2suaGFzSGl0KCkpIHtcclxuICAgICAgbGV0IGNhbGxiYWNrQm9keSA9IEFtbW8uY2FzdE9iamVjdChjbG9zZXN0UmF5UmVzdWx0Q2FsbGJhY2suZ2V0X21fY29sbGlzaW9uT2JqZWN0KCksIEFtbW8uYnRSaWdpZEJvZHkpO1xyXG4gICAgICBpZiAoY2FsbGJhY2tCb2R5ID09IGJvZGllc1sxXSkge1xyXG4gICAgICAgIGN1YmVzWzBdLmdldENvbXBvbmVudChmLkNvbXBvbmVudE1hdGVyaWFsKS5tYXRlcmlhbCA9IG1hdEhpdDtcclxuICAgICAgfSBlbHNlIGlmIChjYWxsYmFja0JvZHkgPT0gYm9kaWVzWzJdKSB7XHJcbiAgICAgICAgY3ViZXNbMV0uZ2V0Q29tcG9uZW50KGYuQ29tcG9uZW50TWF0ZXJpYWwpLm1hdGVyaWFsID0gbWF0SGl0T3RoZXI7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBjdWJlc1swXS5nZXRDb21wb25lbnQoZi5Db21wb25lbnRNYXRlcmlhbCkubWF0ZXJpYWwgPSBtYXROb3JtYWw7XHJcbiAgICAgIGN1YmVzWzFdLmdldENvbXBvbmVudChmLkNvbXBvbmVudE1hdGVyaWFsKS5tYXRlcmlhbCA9IG1hdE5vcm1hbDtcclxuICAgIH1cclxuXHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjcmVhdGVDb21wbGV0ZU1lc2hOb2RlKF9uYW1lOiBzdHJpbmcsIF9tYXRlcmlhbDogZi5NYXRlcmlhbCwgX21lc2g6IGYuTWVzaCk6IGYuTm9kZSB7XHJcbiAgICBsZXQgbm9kZTogZi5Ob2RlID0gbmV3IGYuTm9kZShfbmFtZSk7XHJcbiAgICBsZXQgY21wTWVzaDogZi5Db21wb25lbnRNZXNoID0gbmV3IGYuQ29tcG9uZW50TWVzaChfbWVzaCk7XHJcbiAgICBsZXQgY21wTWF0ZXJpYWw6IGYuQ29tcG9uZW50TWF0ZXJpYWwgPSBuZXcgZi5Db21wb25lbnRNYXRlcmlhbChfbWF0ZXJpYWwpO1xyXG5cclxuICAgIGxldCBjbXBUcmFuc2Zvcm06IGYuQ29tcG9uZW50VHJhbnNmb3JtID0gbmV3IGYuQ29tcG9uZW50VHJhbnNmb3JtKCk7XHJcbiAgICBub2RlLmFkZENvbXBvbmVudChjbXBNZXNoKTtcclxuICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcE1hdGVyaWFsKTtcclxuICAgIG5vZGUuYWRkQ29tcG9uZW50KGNtcFRyYW5zZm9ybSk7XHJcblxyXG4gICAgcmV0dXJuIG5vZGU7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBpbml0aWFsaXplUGh5c2ljc0JvZHkoX2NtcFRyYW5zZm9ybTogZi5Db21wb25lbnRUcmFuc2Zvcm0sIG1hc3NWYWw6IG51bWJlciwgbm86IG51bWJlcikge1xyXG4gICAgbGV0IG5vZGU6IGYuTm9kZSA9IF9jbXBUcmFuc2Zvcm0uZ2V0Q29udGFpbmVyKCk7XHJcbiAgICBsZXQgc2NhbGU6IEFtbW8uYnRWZWN0b3IzID0gbmV3IEFtbW8uYnRWZWN0b3IzKF9jbXBUcmFuc2Zvcm0ubG9jYWwuc2NhbGluZy54IC8gMiwgX2NtcFRyYW5zZm9ybS5sb2NhbC5zY2FsaW5nLnkgLyAyLCBfY21wVHJhbnNmb3JtLmxvY2FsLnNjYWxpbmcueiAvIDIpO1xyXG4gICAgbGV0IHBvczogQW1tby5idFZlY3RvcjMgPSBuZXcgQW1tby5idFZlY3RvcjMoX2NtcFRyYW5zZm9ybS5sb2NhbC50cmFuc2xhdGlvbi54LCBfY21wVHJhbnNmb3JtLmxvY2FsLnRyYW5zbGF0aW9uLnksIF9jbXBUcmFuc2Zvcm0ubG9jYWwudHJhbnNsYXRpb24ueik7XHJcbiAgICBsZXQgdHJhbnNmb3JtOiBBbW1vLmJ0VHJhbnNmb3JtID0gbmV3IEFtbW8uYnRUcmFuc2Zvcm0oKTtcclxuICAgIGxldCBxdWF0ZXJuaW9uUm90OiBhbnkgPSBtYWtlUXVhdGVybmlvbkZyb21Sb3RhdGlvbihub2RlLm10eFdvcmxkLnJvdGF0aW9uLnksIG5vZGUubXR4V29ybGQucm90YXRpb24ueCwgbm9kZS5tdHhXb3JsZC5yb3RhdGlvbi56KTtcclxuICAgIGxldCByb3RhdGlvbjogQW1tby5idFF1YXRlcm5pb24gPSBuZXcgQW1tby5idFF1YXRlcm5pb24ocXVhdGVybmlvblJvdFswXSwgcXVhdGVybmlvblJvdFsxXSwgcXVhdGVybmlvblJvdFsyXSwgcXVhdGVybmlvblJvdFszXSk7XHJcbiAgICB0cmFuc2Zvcm0uc2V0SWRlbnRpdHkoKTtcclxuICAgIHRyYW5zZm9ybS5zZXRPcmlnaW4ocG9zKTtcclxuICAgIHRyYW5zZm9ybS5zZXRSb3RhdGlvbihyb3RhdGlvbik7XHJcbiAgICBsZXQgc2hhcGU6IEFtbW8uYnRCb3hTaGFwZSA9IG5ldyBBbW1vLmJ0Qm94U2hhcGUoc2NhbGUpO1xyXG4gICAgc2hhcGUuc2V0TWFyZ2luKDAuMDUpO1xyXG4gICAgbGV0IG1hc3M6IG51bWJlciA9IG1hc3NWYWw7XHJcbiAgICBsZXQgbG9jYWxJbmVydGlhOiBBbW1vLmJ0VmVjdG9yMyA9IG5ldyBBbW1vLmJ0VmVjdG9yMygwLCAwLCAwKTtcclxuICAgIHNoYXBlLmNhbGN1bGF0ZUxvY2FsSW5lcnRpYShtYXNzLCBsb2NhbEluZXJ0aWEpO1xyXG4gICAgbGV0IG15TW90aW9uU3RhdGU6IEFtbW8uYnREZWZhdWx0TW90aW9uU3RhdGUgPSBuZXcgQW1tby5idERlZmF1bHRNb3Rpb25TdGF0ZSh0cmFuc2Zvcm0pO1xyXG4gICAgbGV0IHJiSW5mbzogQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8gPSBuZXcgQW1tby5idFJpZ2lkQm9keUNvbnN0cnVjdGlvbkluZm8obWFzcywgbXlNb3Rpb25TdGF0ZSwgc2hhcGUsIGxvY2FsSW5lcnRpYSk7XHJcbiAgICByYkluZm8ubV9yZXN0aXR1dGlvbiA9IDAuNTtcclxuICAgIGxldCBib2R5OiBBbW1vLmJ0UmlnaWRCb2R5ID0gbmV3IEFtbW8uYnRSaWdpZEJvZHkocmJJbmZvKTtcclxuICAgIGJvZGllc1tub10gPSBib2R5O1xyXG4gICAgd29ybGQuYWRkUmlnaWRCb2R5KGJvZHkpO1xyXG4gIH1cclxuXHJcbiAgZnVuY3Rpb24gYXBwbHlQaHlzaWNzQm9keShfY21wVHJhbnNmb3JtOiBmLkNvbXBvbmVudFRyYW5zZm9ybSwgbm86IG51bWJlcik6IHZvaWQge1xyXG4gICAgbGV0IG5vZGU6IGYuTm9kZSA9IF9jbXBUcmFuc2Zvcm0uZ2V0Q29udGFpbmVyKCk7XHJcblxyXG4gICAgbGV0IGJvZHkgPSBib2RpZXNbbm9dO1xyXG4gICAgYm9keS5nZXRNb3Rpb25TdGF0ZSgpLmdldFdvcmxkVHJhbnNmb3JtKHRyYW5zZm9ybSk7XHJcbiAgICAvL2JvZHkuc2V0TGluZWFyVmVsb2NpdHkobmV3IEFtbW8uYnRWZWN0b3IzKDEsIDAsIDApKTtcclxuXHJcbiAgICBsZXQgb3JpZ2luID0gdHJhbnNmb3JtLmdldE9yaWdpbigpO1xyXG4gICAgbGV0IHRtcFBvc2l0aW9uOiBmLlZlY3RvcjMgPSBuZXcgZi5WZWN0b3IzKG9yaWdpbi54KCksIG9yaWdpbi55KCksIG9yaWdpbi56KCkpO1xyXG4gICAgbGV0IHJvdGF0aW9uID0gdHJhbnNmb3JtLmdldFJvdGF0aW9uKCk7XHJcbiAgICAvL2xldCByb3RUZW1wOiBBbW1vLmJ0VmVjdG9yMyA9IHRyYW5zZm9ybS5nZXRSb3RhdGlvbigpLmdldEF4aXMoKTsgLy9Sb3RhdGlvbmVuIG5pY2h0IGF1cyBRdWF0ZXJpb25zIGJlcmVjaG5lblxyXG4gICAgLy9sZXQgcm90OiBmLlZlY3RvcjMgPSBuZXcgZi5WZWN0b3IzKHJvdFRlbXAueCgpLCByb3RUZW1wLnkoKSwgcm90VGVtcC56KCkpO1xyXG4gICAgbGV0IHJvdFF1YXQgPSBuZXcgQXJyYXkoKTtcclxuICAgIHJvdFF1YXQueCA9IHJvdGF0aW9uLngoKTtcclxuICAgIHJvdFF1YXQueSA9IHJvdGF0aW9uLnkoKTtcclxuICAgIHJvdFF1YXQueiA9IHJvdGF0aW9uLnooKTtcclxuICAgIHJvdFF1YXQudyA9IHJvdGF0aW9uLncoKTtcclxuXHJcbiAgICBsZXQgbXV0YXRvcjogZi5NdXRhdG9yID0ge307XHJcbiAgICBsZXQgdG1wUm90YXRpb246IGYuVmVjdG9yMyA9IG1ha2VSb3RhdGlvbkZyb21RdWF0ZXJuaW9uKHJvdFF1YXQsIG5vZGUubXR4TG9jYWwucm90YXRpb24pO1xyXG5cclxuICAgIG11dGF0b3JbXCJyb3RhdGlvblwiXSA9IHRtcFJvdGF0aW9uO1xyXG4gICAgbm9kZS5tdHhMb2NhbC5tdXRhdGUobXV0YXRvcik7XHJcbiAgICBtdXRhdG9yW1widHJhbnNsYXRpb25cIl0gPSB0bXBQb3NpdGlvbjtcclxuICAgIG5vZGUubXR4TG9jYWwubXV0YXRlKG11dGF0b3IpO1xyXG5cclxuICB9XHJcblxyXG5cclxuICBmdW5jdGlvbiBtYWtlUm90YXRpb25Gcm9tUXVhdGVybmlvbihxOiBhbnksIHRhcmdldEF4aXM6IGYuVmVjdG9yMyA9IG5ldyBmLlZlY3RvcjMoMSwgMSwgMSkpOiBmLlZlY3RvcjMge1xyXG4gICAgbGV0IGFuZ2xlczogZi5WZWN0b3IzID0gbmV3IGYuVmVjdG9yMygpO1xyXG5cclxuICAgIC8vIHJvbGwgKHgtYXhpcyByb3RhdGlvbilcclxuICAgIGxldCBzaW5yX2Nvc3A6IG51bWJlciA9IDIgKiAocS53ICogcS54ICsgcS55ICogcS56KTtcclxuICAgIGxldCBjb3NyX2Nvc3A6IG51bWJlciA9IDEgLSAyICogKHEueCAqIHEueCArIHEueSAqIHEueSk7XHJcbiAgICBhbmdsZXMueCA9IE1hdGguYXRhbjIoc2lucl9jb3NwLCBjb3NyX2Nvc3ApICogZi5Mb29wLmdldEZwc1JlYWxBdmVyYWdlKCk7IC8vKkZyYW1lcmF0ZT8gLy8qIDE4MDtcclxuXHJcbiAgICAvLyBwaXRjaCAoeS1heGlzIHJvdGF0aW9uKVxyXG4gICAgbGV0IHNpbnA6IG51bWJlciA9IDIgKiAocS53ICogcS55IC0gcS56ICogcS54KTtcclxuICAgIGlmIChNYXRoLmFicyhzaW5wKSA+PSAxKVxyXG4gICAgICBhbmdsZXMueSA9IGNvcHlzaWduKE1hdGguUEkgLyAyLCBzaW5wKSAqIGYuTG9vcC5nZXRGcHNSZWFsQXZlcmFnZSgpOyAvLyB1c2UgOTAgZGVncmVlcyBpZiBvdXQgb2YgcmFuZ2VcclxuICAgIGVsc2VcclxuICAgICAgYW5nbGVzLnkgPSBNYXRoLmFzaW4oc2lucCkgKiBmLkxvb3AuZ2V0RnBzUmVhbEF2ZXJhZ2UoKTtcclxuXHJcbiAgICAvLyB5YXcgKHotYXhpcyByb3RhdGlvbilcclxuICAgIGxldCBzaW55X2Nvc3A6IG51bWJlciA9IDIgKiAocS53ICogcS56ICsgcS54ICogcS55KTtcclxuICAgIGxldCBjb3N5X2Nvc3A6IG51bWJlciA9IDEgLSAyICogKHEueSAqIHEueSArIHEueiAqIHEueik7XHJcbiAgICBhbmdsZXMueiA9IE1hdGguYXRhbjIoc2lueV9jb3NwLCBjb3N5X2Nvc3ApICogZi5Mb29wLmdldEZwc1JlYWxBdmVyYWdlKCk7O1xyXG4gICAgLy9mLkRlYnVnLmxvZyhhbmdsZXMpO1xyXG4gICAgcmV0dXJuIGFuZ2xlcztcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIG1ha2VRdWF0ZXJuaW9uRnJvbVJvdGF0aW9uKHlhd1k6IG51bWJlciwgcGl0Y2hYOiBudW1iZXIsIHJvbGxaOiBudW1iZXIpOiBudW1iZXJbXSB7IC8vRnJvbSBDIyAuTmV0IFF1YXRlcm5pb24gQ2xhc3NcclxuICAgIC8vICBSb2xsIGZpcnN0LCBhYm91dCBheGlzIHRoZSBvYmplY3QgaXMgZmFjaW5nLCB0aGVuXHJcbiAgICAvLyAgcGl0Y2ggdXB3YXJkLCB0aGVuIHlhdyB0byBmYWNlIGludG8gdGhlIG5ldyBoZWFkaW5nXHJcbiAgICBsZXQgc3I6IG51bWJlciwgY3I6IG51bWJlciwgc3A6IG51bWJlciwgY3A6IG51bWJlciwgc3k6IG51bWJlciwgY3k6IG51bWJlcjtcclxuXHJcbiAgICBsZXQgaGFsZlJvbGw6IG51bWJlciA9IHJvbGxaICogMC41O1xyXG4gICAgc3IgPSBNYXRoLnNpbihoYWxmUm9sbCk7XHJcbiAgICBjciA9IE1hdGguY29zKGhhbGZSb2xsKTtcclxuXHJcbiAgICBsZXQgaGFsZlBpdGNoOiBudW1iZXIgPSBwaXRjaFggKiAwLjU7XHJcbiAgICBzcCA9IE1hdGguc2luKGhhbGZQaXRjaCk7XHJcbiAgICBjcCA9IE1hdGguY29zKGhhbGZQaXRjaCk7XHJcblxyXG4gICAgbGV0IGhhbGZZYXc6IG51bWJlciA9IHlhd1kgKiAwLjU7XHJcbiAgICBzeSA9IE1hdGguc2luKGhhbGZZYXcpO1xyXG4gICAgY3kgPSBNYXRoLmNvcyhoYWxmWWF3KTtcclxuXHJcbiAgICBsZXQgcmVzdWx0OiBudW1iZXJbXSA9IFtdO1xyXG5cclxuICAgIHJlc3VsdFswXSA9IGN5ICogc3AgKiBjciArIHN5ICogY3AgKiBzcjtcclxuICAgIHJlc3VsdFsxXSA9IHN5ICogY3AgKiBjciAtIGN5ICogc3AgKiBzcjtcclxuICAgIHJlc3VsdFsyXSA9IGN5ICogY3AgKiBzciAtIHN5ICogc3AgKiBjcjtcclxuICAgIHJlc3VsdFszXSA9IGN5ICogY3AgKiBjciArIHN5ICogc3AgKiBzcjtcclxuXHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcblxyXG4gIGZ1bmN0aW9uIGNvcHlzaWduKGE6IG51bWJlciwgYjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBiIDwgMCA/IC1NYXRoLmFicyhhKSA6IE1hdGguYWJzKGEpO1xyXG4gIH1cclxuXHJcbn1cclxuIl19