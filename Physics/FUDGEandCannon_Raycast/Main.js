"use strict";
///<reference types="../../Core/Build/FudgeCore.js"/>
///<reference types="../Physics_Library/cannon.min.js"/>
var FudgePhysics_Communication;
///<reference types="../../Core/Build/FudgeCore.js"/>
///<reference types="../Physics_Library/cannon.min.js"/>
(function (FudgePhysics_Communication) {
    var f = FudgeCore;
    var c = CANNON;
    window.addEventListener("load", init);
    const app = document.querySelector("canvas");
    let viewPort;
    let cmpCamera;
    let hierarchy;
    let fps;
    const times = [];
    let cubes = new Array();
    let fpsDisplay = document.querySelector("h2#FPS");
    let bodies = new Array();
    let world = new c.World();
    function init(_event) {
        f.Debug.log(app);
        f.RenderManager.initialize();
        hierarchy = new f.Node("Scene");
        let ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube());
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.local.scale(new f.Vector3(10, 0.3, 10));
        hierarchy.appendChild(ground);
        cubes[0] = createCompleteMeshNode("Cube_1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        let cmpCubeTransform = cubes[0].getComponent(f.ComponentTransform);
        cmpCubeTransform.local.translate(new f.Vector3(0, 2, 0));
        //  cubes[0].mtxWorld.rotateX(45);
        hierarchy.appendChild(cubes[0]);
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(2, 2, 10));
        cmpCamera.pivot.lookAt(f.Vector3.ZERO());
        //Physics CANNON
        world.gravity = new CANNON.Vec3(0, -9.81, 0);
        world.allowSleep = true;
        initializePhysicsBody(ground.getComponent(f.ComponentTransform), 0, 0);
        initializePhysicsBody(cmpCubeTransform, 1, 1);
        //EndPhysics
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        viewPort.activatePointerEvent("\u0192pointerdown" /* DOWN */, true);
        viewPort.addEventListener("\u0192pointerdown" /* DOWN */, hndPointerDown);
        viewPort.activatePointerEvent("\u0192pointerup" /* UP */, true);
        viewPort.addEventListener("\u0192pointerup" /* UP */, hndPointerUp);
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Loop.start(f.LOOP_MODE.FRAME_REQUEST, 60, true);
    }
    let from = new CANNON.Vec3(-5, 0.3, 0);
    let to = getRayEndPoint(from, new f.Vector3(1, 0, 0), 10); //new CANNON.Vec3(5, 0.3, 0);
    let result = new CANNON.RaycastResult();
    let raycastOptions = {};
    let matHit = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0, 1, 0, 1)));
    let matNormal = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1)));
    let posProjection;
    let screenPos;
    function update() {
        //Physics CANNON
        world.step(f.Loop.timeFrameGame / 1000);
        applyPhysicsBody(cubes[0].getComponent(f.ComponentTransform), 1);
        result.reset();
        world.raycastClosest(from, to, raycastOptions, result);
        if (result.body != null && result.body.id == 1) {
            cubes[0].getComponent(f.ComponentMaterial).material = matHit;
        }
        else {
            cubes[0].getComponent(f.ComponentMaterial).material = matNormal;
        }
        //EndPhysics
        viewPort.draw();
        fpsDisplay.textContent = "FPS: " + f.Loop.getFpsRealAverage().toFixed(2);
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function initializePhysicsBody(_cmpTransform, massVal, no) {
        let node = _cmpTransform.getContainer();
        let scale = new CANNON.Vec3(_cmpTransform.local.scaling.x / 2, _cmpTransform.local.scaling.y / 2, _cmpTransform.local.scaling.z / 2);
        let pos = new CANNON.Vec3(_cmpTransform.local.translation.x, _cmpTransform.local.translation.y, _cmpTransform.local.translation.z);
        let rotation = new CANNON.Quaternion();
        rotation.setFromEuler(node.mtxWorld.rotation.x, node.mtxWorld.rotation.y, node.mtxWorld.rotation.z);
        let mat = new CANNON.Material();
        mat.friction = 1;
        mat.restitution = 0.95;
        bodies[no] = new CANNON.Body({
            mass: massVal,
            position: pos,
            quaternion: rotation,
            shape: new CANNON.Box(scale),
            material: mat,
            allowSleep: true,
            sleepSpeedLimit: 0.25,
            sleepTimeLimit: 1 // Body falls asleep after 1s of sleepiness
        });
        world.addBody(bodies[no]);
    }
    function applyPhysicsBody(_cmpTransform, no) {
        let node = _cmpTransform.getContainer();
        let tmpPosition = new f.Vector3(bodies[no].position.x, bodies[no].position.y, bodies[no].position.z);
        let mutator = {};
        let tmpRotation = makeRotationFromQuaternion(bodies[no].quaternion, node.mtxLocal.rotation);
        mutator["rotation"] = tmpRotation;
        node.mtxLocal.mutate(mutator);
        mutator["translation"] = tmpPosition;
        node.mtxLocal.mutate(mutator);
    }
    function makeRotationFromQuaternion(q, targetAxis = new f.Vector3(1, 1, 1)) {
        let angles = new f.Vector3();
        // roll (x-axis rotation)
        let sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
        let cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
        angles.x = Math.atan2(sinr_cosp, cosr_cosp) * f.Loop.getFpsRealAverage(); //*Framerate? ;
        // pitch (y-axis rotation)
        let sinp = 2 * (q.w * q.y - q.z * q.x);
        if (Math.abs(sinp) >= 1)
            angles.y = copysign(Math.PI / 2, sinp) * f.Loop.getFpsRealAverage(); // use 90 degrees if out of range
        else
            angles.y = Math.asin(sinp) * f.Loop.getFpsRealAverage();
        // yaw (z-axis rotation)
        let siny_cosp = 2 * (q.w * q.z + q.x * q.y);
        let cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
        angles.z = Math.atan2(siny_cosp, cosy_cosp) * f.Loop.getFpsRealAverage();
        //f.Debug.log(angles);
        return angles;
    }
    function copysign(a, b) {
        return b < 0 ? -Math.abs(a) : Math.abs(a);
    }
    //to define a cannon ray not with it's start and end but direction and length
    function getRayEndPoint(start, direction, length) {
        let endpoint = f.Vector3.ZERO();
        endpoint.add(start);
        direction.scale(length);
        endpoint.add(direction);
        return endpoint;
    }
    function hndPointerDown(_event) {
        let cam = cmpCamera.getContainer();
        //Canvas Space to Cam/World Space
        posProjection = viewPort.pointClientToProjection(new f.Vector2(_event.pointerX, _event.pointerY));
        //Ray
        let origin = new f.Vector3(-posProjection.x, posProjection.y, 1);
        origin.transform(cmpCamera.pivot);
        let dir = cmpCamera.pivot.rotation;
        dir = new f.Vector3(0.5, -1, -0.8);
        // dir.normalize();
        f.Debug.log("EndCalc:" + dir);
        //dir.transform(cmpCamera.pivot, false);
        let end = getRayEndPoint(origin, dir, 30);
        cmpCamera;
        let hitResult = new CANNON.RaycastResult();
        let options = {};
        f.Debug.log("End:" + end);
        f.Debug.log("Origin:" + origin);
        hitResult.reset();
        world.raycastClosest(origin, end, options, hitResult);
        f.Debug.log(hitResult);
        bodies[1].type = CANNON.Body.KINEMATIC;
        bodies[1].velocity = new CANNON.Vec3(0, 0, 0);
    }
    function hndPointerUp(_event) {
        bodies[1].type = CANNON.Body.DYNAMIC;
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,