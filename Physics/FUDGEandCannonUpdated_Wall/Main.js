"use strict";
///<reference types="../../Core/Build/FudgeCore.js"/>
///<reference path="cannon-es.js"/>
var FudgePhysics_Communication;
(function (FudgePhysics_Communication) {
    var f = FudgeCore;
    window.addEventListener("load", init);
    const app = document.querySelector("canvas");
    let viewPort;
    let hierarchy;
    let fps;
    const times = [];
    let cubes = new Array();
    let fpsDisplay = document.querySelector("h2#FPS");
    let bodies = new Array();
    let bodiesNo = 0;
    let world;
    let starttimer = 2;
    function init(_event) {
        f.Debug.log(app);
        f.RenderManager.initialize();
        hierarchy = new f.Node("Scene");
        let ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube());
        let cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.local.scale(new f.Vector3(50, 0.3, 50));
        hierarchy.appendChild(ground);
        //CANNON Physics Ground/Settings
        world = new World();
        world.gravity = new Vec3(0, -9.81, 0);
        world.allowSleep = true;
        world.solver.iterations = 10;
        initializePhysicsBody(ground.getComponent(f.ComponentTransform), 0, 0);
        //Wall Creation
        let cubeNo = 0;
        for (let a = 0; a < 10; a++) {
            for (let b = 0; b < 10; b++) {
                cubes[cubeNo] = createCompleteMeshNode("Cube_" + cubeNo.toString(), new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
                //cubes[cubeNo].mtxWorld.rotateX(45);
                let cmpCubeTransform = cubes[cubeNo].getComponent(f.ComponentTransform);
                cmpCubeTransform.local.translate(new f.Vector3(-5 + b, a + 5, 0));
                hierarchy.appendChild(cubes[cubeNo]);
                //Physics
                //f.Debug.log(cmpCubeTransform.getContainer().name);
                initializePhysicsBody(cmpCubeTransform, 1, 1 + cubeNo);
                cubeNo++;
            }
        }
        //EndWall Creation
        let cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        let cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(2, 5, 25));
        cmpCamera.pivot.lookAt(f.Vector3.ZERO());
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Loop.start(f.LOOP_MODE.TIME_GAME, 60);
    }
    function update() {
        if (starttimer <= 0) {
            //Physics CANNON
            world.step(f.Loop.timeFrameGame / 1000);
            for (let i = 1; i < bodies.length; i++) {
                applyPhysicsBody(cubes[i - 1].getComponent(f.ComponentTransform), i);
            }
            //EndPhysics
        }
        else {
            starttimer -= f.Loop.timeFrameGame / 1000;
        }
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(() => {
            const now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        let node = new f.Node(_name);
        let cmpMesh = new f.ComponentMesh(_mesh);
        let cmpMaterial = new f.ComponentMaterial(_material);
        let cmpTransform = new f.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function initializePhysicsBody(_cmpTransform, massVal, no) {
        let node = _cmpTransform.getContainer();
        let scale = new Vec3(_cmpTransform.local.scaling.x / 2, _cmpTransform.local.scaling.y / 2, _cmpTransform.local.scaling.z / 2);
        let pos = new Vec3(_cmpTransform.local.translation.x, _cmpTransform.local.translation.y, _cmpTransform.local.translation.z);
        let rotation = new Quaternion();
        rotation.setFromEuler(node.mtxWorld.rotation.x, node.mtxWorld.rotation.y, node.mtxWorld.rotation.z);
        let mat = new Material();
        mat.friction = 1;
        mat.restitution = 0;
        bodies[no] = new Body({
            mass: massVal,
            position: pos,
            quaternion: rotation,
            shape: new Box(scale),
            material: mat,
            allowSleep: true,
            sleepSpeedLimit: 0.25,
            sleepTimeLimit: 1,
            linearDamping: 0.3
        });
        world.addBody(bodies[no]);
    }
    function applyPhysicsBody(_cmpTransform, no) {
        let node = _cmpTransform.getContainer();
        let tmpPosition = new f.Vector3(bodies[no].position.x, bodies[no].position.y, bodies[no].position.z);
        let mutator = {};
        let tmpRotation = makeRotationFromQuaternion(bodies[no].quaternion);
        mutator["rotation"] = tmpRotation;
        mutator["translation"] = tmpPosition;
        node.mtxLocal.mutate(mutator);
    }
    function makeRotationFromQuaternion(q) {
        let angles = new f.Vector3();
        // roll (x-axis rotation)
        let sinr_cosp = 2 * (q.w * q.x + q.y * q.z);
        let cosr_cosp = 1 - 2 * (q.x * q.x + q.y * q.y);
        angles.x = Math.atan2(sinr_cosp, cosr_cosp) * 60; //f.Loop.getFpsRealAverage(); //*Framerate?
        // pitch (y-axis rotation)
        let sinp = 2 * (q.w * q.y - q.z * q.x);
        if (Math.abs(sinp) >= 1)
            angles.y = copysign(Math.PI / 2, sinp) * 60; //f.Loop.getFpsRealAverage(); // use 90 degrees if out of range
        else
            angles.y = Math.asin(sinp) * 60; //f.Loop.getFpsRealAverage();
        // yaw (z-axis rotation)
        let siny_cosp = 2 * (q.w * q.z + q.x * q.y);
        let cosy_cosp = 1 - 2 * (q.y * q.y + q.z * q.z);
        angles.z = Math.atan2(siny_cosp, cosy_cosp) * 60; //f.Loop.getFpsRealAverage();
        //f.Debug.log(angles);
        return angles;
    }
    function copysign(a, b) {
        return b < 0 ? -Math.abs(a) : Math.abs(a);
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,