"use strict";
///<reference path="../../Core/Build/FudgeCore.d.ts"/>
///<reference path="../Physics_Library/OimoPhysics.d.ts"/>
Object.defineProperty(exports, "__esModule", { value: true });
var oimo = require("../Physics_Library/OimoPhysics");
var FudgePhysics_Communication;
(function (FudgePhysics_Communication) {
    //import oimo = window.OIMO;
    var f = FudgeCore;
    f.Debug.log("Test");
    window.addEventListener("load", init);
    var app = document.querySelector("canvas");
    var viewPort;
    var hierarchy;
    var fps;
    var times = [];
    var cubes = new Array();
    var fpsDisplay = document.querySelector("h2#FPS");
    var bodies = new Array();
    var world = new oimo.dynamics.World();
    var floorSpring;
    var matHit = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0, 1, 0, 1)));
    var matNormal = new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1)));
    function init(_event) {
        f.Debug.log(app);
        f.RenderManager.initialize();
        hierarchy = new f.Node("Scene");
        var ground = createCompleteMeshNode("Ground", new f.Material("Ground", f.ShaderFlat, new f.CoatColored(new f.Color(0.2, 0.2, 0.2, 1))), new f.MeshCube());
        var cmpGroundMesh = ground.getComponent(f.ComponentTransform);
        cmpGroundMesh.local.scale(new f.Vector3(10, 0.3, 10));
        hierarchy.appendChild(ground);
        cubes[0] = createCompleteMeshNode("Cube_1", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        var cmpCubeTransform = cubes[0].getComponent(f.ComponentTransform);
        cmpCubeTransform.local.translate(new f.Vector3(0, 1.5, 0));
        //cubes[0].mtxLocal.rotateX(45);
        hierarchy.appendChild(cubes[0]);
        cubes[1] = createCompleteMeshNode("Cube_2", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        var cmpCubeTransform2 = cubes[1].getComponent(f.ComponentTransform);
        cmpCubeTransform2.local.translate(new f.Vector3(0, 3.5, 0.4));
        hierarchy.appendChild(cubes[1]);
        cubes[2] = createCompleteMeshNode("Cube_3", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        var cmpCubeTransform3 = cubes[2].getComponent(f.ComponentTransform);
        cmpCubeTransform3.local.translate(new f.Vector3(0, 7, 0.4));
        hierarchy.appendChild(cubes[2]);
        cubes[3] = createCompleteMeshNode("Cube_4", new f.Material("Cube", f.ShaderFlat, new f.CoatColored(new f.Color(1, 0, 0, 1))), new f.MeshCube());
        var cmpCubeTransform4 = cubes[3].getComponent(f.ComponentTransform);
        cmpCubeTransform4.local.translate(new f.Vector3(0, 15, 0.4));
        hierarchy.appendChild(cubes[3]);
        var cmpLight = new f.ComponentLight(new f.LightDirectional(f.Color.CSS("WHITE")));
        cmpLight.pivot.lookAt(new f.Vector3(0.5, -1, -0.8));
        hierarchy.addComponent(cmpLight);
        var cmpCamera = new f.ComponentCamera();
        cmpCamera.backgroundColor = f.Color.CSS("GREY");
        cmpCamera.pivot.translate(new f.Vector3(2, 2, 15));
        cmpCamera.pivot.lookAt(f.Vector3.ZERO());
        //Physics OIMO
        initializePhysicsBody(ground.getComponent(f.ComponentTransform), false, 0);
        initializePhysicsBody(cmpCubeTransform, true, 1);
        initializePhysicsBody(cmpCubeTransform2, true, 2);
        initializePhysicsBody(cmpCubeTransform3, true, 3);
        initializePhysicsBody(cmpCubeTransform4, true, 4);
        floorSpring = addPrismaticJoint(bodies[0], bodies[1]);
        floorSpring.setBreakForce(100);
        //EndPhysics
        viewPort = new f.Viewport();
        viewPort.initialize("Viewport", hierarchy, cmpCamera, app);
        viewPort.showSceneGraph();
        f.Loop.addEventListener("loopFrame" /* LOOP_FRAME */, update);
        f.Loop.start();
    }
    function update() {
        //Physics OIMO
        world.step(f.Loop.timeFrameGame / 1000);
        applyPhysicsBody(cubes[0].getComponent(f.ComponentTransform), 1);
        applyPhysicsBody(cubes[1].getComponent(f.ComponentTransform), 2);
        applyPhysicsBody(cubes[2].getComponent(f.ComponentTransform), 3);
        applyPhysicsBody(cubes[3].getComponent(f.ComponentTransform), 4);
        //EndPhysics
        raycastMatChange();
        viewPort.draw();
        measureFPS();
    }
    function measureFPS() {
        window.requestAnimationFrame(function () {
            var now = performance.now();
            while (times.length > 0 && times[0] <= now - 1000) {
                times.shift();
            }
            times.push(now);
            fps = times.length;
            fpsDisplay.textContent = "FPS: " + fps.toString();
        });
    }
    function createCompleteMeshNode(_name, _material, _mesh) {
        var node = new f.Node(_name);
        var cmpMesh = new f.ComponentMesh(_mesh);
        var cmpMaterial = new f.ComponentMaterial(_material);
        var cmpTransform = new f.ComponentTransform();
        node.addComponent(cmpMesh);
        node.addComponent(cmpMaterial);
        node.addComponent(cmpTransform);
        return node;
    }
    function initializePhysicsBody(_cmpTransform, dynamic, no) {
        var node = _cmpTransform.getContainer();
        var scale = new oimo.common.Vec3(node.mtxLocal.scaling.x / 2, node.mtxLocal.scaling.y / 2, node.mtxLocal.scaling.z / 2);
        var shapec = new oimo.dynamics.rigidbody.ShapeConfig();
        var geometry = new oimo.collision.geometry.BoxGeometry(scale);
        shapec.geometry = geometry;
        var massData = new oimo.dynamics.rigidbody.MassData();
        massData.mass = 1;
        var bodyc = new oimo.dynamics.rigidbody.RigidBodyConfig();
        bodyc.type = dynamic ? oimo.dynamics.rigidbody.RigidBodyType.DYNAMIC : oimo.dynamics.rigidbody.RigidBodyType.STATIC;
        bodyc.position = new oimo.common.Vec3(node.mtxLocal.translation.x, node.mtxLocal.translation.y, node.mtxLocal.translation.z);
        bodyc.rotation.fromEulerXyz(new oimo.common.Vec3(node.mtxLocal.rotation.x, node.mtxLocal.rotation.y, node.mtxLocal.rotation.z));
        var rb = new oimo.dynamics.rigidbody.RigidBody(bodyc);
        rb.addShape(new oimo.dynamics.rigidbody.Shape(shapec));
        rb.setMassData(massData);
        rb.getShapeList().setRestitution(0);
        rb.getShapeList().setFriction(1);
        bodies[no] = rb;
        world.addRigidBody(rb);
    }
    function applyPhysicsBody(_cmpTransform, no) {
        var node = _cmpTransform.getContainer();
        var tmpPosition = new f.Vector3(bodies[no].getPosition().x, bodies[no].getPosition().y, bodies[no].getPosition().z);
        var mutator = {};
        var orientation = bodies[no].getOrientation();
        var tmpQuat = new f.Quaternion(orientation.x, orientation.y, orientation.z, orientation.w);
        var tmpRotation = tmpQuat.toDegrees();
        mutator["rotation"] = tmpRotation;
        mutator["translation"] = tmpPosition;
        node.mtxLocal.mutate(mutator);
    }
    function raycastMatChange() {
        var ray = new oimo.dynamics.callback.RayCastClosest();
        var begin = new oimo.common.Vec3(-5, 0.3, 0);
        var end = getRayEndPoint(begin, new f.Vector3(1, 0, 0), 10);
        ray.clear();
        world.rayCast(begin, end, ray);
        if (ray.hit)
            cubes[0].getComponent(f.ComponentMaterial).material = matHit;
        else {
            cubes[0].getComponent(f.ComponentMaterial).material = matNormal;
        }
    }
    function getRayEndPoint(start, direction, length) {
        var endpoint = f.Vector3.ZERO();
        endpoint.add(start);
        var endDirection = direction;
        endDirection.scale(length);
        endpoint.add(endDirection);
        return endpoint;
    }
    function addPrismaticJoint(rb1, rb2) {
        var axis = new oimo.common.Vec3(0, 1, 0);
        var anchor = rb1.getPosition();
        var jc = new oimo.dynamics.constraint.joint.PrismaticJointConfig();
        jc.init(rb1, rb2, anchor, axis);
        var springDamper = new oimo.dynamics.constraint.joint.SpringDamper().setSpring(3, 0.2);
        var limitMotor = new oimo.dynamics.constraint.joint.TranslationalLimitMotor().setLimits(0, 0);
        jc.springDamper = springDamper;
        jc.limitMotor = limitMotor;
        var j = new oimo.dynamics.constraint.joint.PrismaticJoint(jc);
        world.addJoint(j);
        return j;
    }
})(FudgePhysics_Communication || (FudgePhysics_Communication = {}));
//# sourceMappingURL=data:application/json;base64,